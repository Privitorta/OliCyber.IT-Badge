name: Generate Card

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      style:
        description: 'Card style (default, dark, white, darkRed, hacker, oldDefault)'
        required: false
        default: 'default'
  schedule:
    - cron: '23 23 * * *'

jobs:
  generate-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Generate card image
      run: |
        # Make sure the OC_TOKEN environment variable is available
        export OC_TOKEN=${{ secrets.OC_TOKEN }}
        # Use the style parameter if provided through workflow_dispatch
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.style }}" != "" ]; then
          python gen.py ${{ github.event.inputs.style }}
        else
          python gen.py
        fi
    
    - name: Upload SVG to GitHub Repo
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = './card.svg';  // Ensure this is the correct path
          const content = fs.readFileSync(path, { encoding: 'base64' });
          const owner = process.env.GITHUB_ACTOR;  // GitHub username (owner of the repo)
          const repo = process.env.GITHUB_REPOSITORY.split('/')[1];  // Repository name
          const filePath = 'card.svg';
          
          try {
            const { data: existingFile } = await github.rest.repos.getContent({
              owner,
              repo,
              path: filePath
            });
            const sha = existingFile.sha;
            
            await github.rest.repos.createOrUpdateFileContents({
              owner,
              repo,
              path: filePath,
              message: 'Upload SVG Card',
              content,
              sha,  // Provide the sha here
              committer: {
                name: 'GitHub Actions',
                email: 'actions@github.com'
              }
            });
          } catch (error) {
            await github.rest.repos.createOrUpdateFileContents({
              owner,
              repo,
              path: filePath,
              message: 'Upload SVG Card',
              content,
              committer: {
                name: 'GitHub Actions',
                email: 'actions@github.com'
              }
            });
          }
    
    - name: Generate Camo URL
      run: |
        echo "https://raw.githubusercontent.com/${GITHUB_ACTOR}/${GITHUB_REPOSITORY}/refs/heads/main/card.svg"